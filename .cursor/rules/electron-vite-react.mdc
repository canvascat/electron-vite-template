---
alwaysApply: true
---

# Electron + Vite + React 项目 Cursor 规则

## 项目概述

这是一个使用 Electron + Vite + React + TypeScript + Tailwind CSS 的现代化桌面应用开发模板。

## 技术栈

- **前端框架**: React 19 + TypeScript
- **构建工具**: Vite + Rolldown
- **桌面框架**: Electron
- **样式**: Tailwind CSS 4.x
- **组件库**: shadcn/ui
- **代码质量**: Oxlint + Prettier
- **包管理**: pnpm
- **测试**: Vitest + Playwright

## 代码规范

### 文件命名

- 组件文件使用 PascalCase: `ComponentName.tsx`
- 工具文件使用 camelCase: `utils.ts`
- 类型文件使用 kebab-case: `electron-updater.d.ts`
- 目录使用 kebab-case: `components/update/`

### 导入规范

- 使用 `@/` 别名导入 src 目录下的文件
- 第三方库导入放在最前面
- 本地导入放在第三方导入之后
- 类型导入使用 `import type`

### TypeScript 规范

- 严格使用 TypeScript，避免 `any` 类型
- 为所有函数参数和返回值定义类型
- 使用接口定义复杂对象类型
- 优先使用 `const` 和 `let`，避免 `var`

### React 组件规范

- 使用函数组件和 Hooks
- 组件名使用 PascalCase
- 使用 `useCallback` 和 `useMemo` 优化性能
- 事件处理函数使用 `handle` 前缀

### 样式规范

- 使用 Tailwind CSS 类名
- 支持深色模式: `dark:bg-gray-800`
- 使用响应式设计: `md:text-lg`
- 动画使用 Tailwind 类: `transition-all duration-200`

### 组件库规范

- 优先使用 shadcn/ui 组件
- 使用 `cn()` 函数合并 Tailwind 类名
- 组件导入使用 `@/components/ui/` 路径
- 自定义组件继承 shadcn/ui 的设计系统
- 使用 `class-variance-authority` 创建组件变体
- 需要新组件时，询问是否安装: `pnpm dlx shadcn@latest add [component-name]`

### Electron 规范

- IPC 通信使用 `tipc-electron`
- 主进程代码放在 `electron/main/`
- 预加载脚本放在 `electron/preload/`
- 使用类型安全的 IPC 通信

## 项目结构

```
src/
├── components/          # React 组件
│   ├── ui/             # shadcn/ui 组件
│   └── update/         # 更新相关组件
├── assets/             # 静态资源
├── lib/                # 工具函数
├── type/               # TypeScript 类型定义
└── demos/              # 示例代码

electron/
├── main/               # 主进程代码
└── preload/            # 预加载脚本
```

## 开发规范

### 代码格式化

- 使用 Prettier 格式化代码
- 使用 Oxlint 进行代码检查
- 缩进使用制表符 (Tab)
- 行尾使用 LF

### 提交规范

- 使用语义化提交信息
- 格式: `type(scope): description`
- 类型: feat, fix, docs, style, refactor, test, chore

### 性能优化

- 使用 React.memo 优化组件渲染
- 合理使用 useCallback 和 useMemo
- 避免不必要的重渲染
- 优化 Electron 进程间通信

### 安全规范

- 验证所有用户输入
- 使用 CSP 策略
- 避免在渲染进程中使用 Node.js API
- 使用 contextIsolation 和 enableRemoteModule: false

## 常见模式

### IPC 通信模式

```typescript
// 发送消息
await window.electron.ipcRenderer.invoke("channel-name", data);

// 监听消息
window.electron.ipcRenderer.on("channel-name", callback);
```

### 组件状态管理

```typescript
const [state, setState] = useState<StateType>();
const handleAction = useCallback(() => {
	// 处理逻辑
}, []);
```

### shadcn/ui 组件使用

```typescript
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

// 使用组件变体
<Button variant="default" size="lg" className={cn("custom-class")}>
  按钮文本
</Button>

// 使用 Dialog 组件
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
```

### 组件安装指导

当需要使用新的 shadcn/ui 组件时：

1. 检查组件是否已存在于 `src/components/ui/` 目录
2. 如果不存在，询问用户是否安装: `pnpm dlx shadcn@latest add [component-name]`
3. 常见组件安装命令：
   - `pnpm dlx shadcn@latest add button`
   - `pnpm dlx shadcn@latest add dialog`
   - `pnpm dlx shadcn@latest add input`
   - `pnpm dlx shadcn@latest add card`
   - `pnpm dlx shadcn@latest add form`

### 错误处理

```typescript
try {
	const result = await someAsyncOperation();
} catch (error) {
	console.error("操作失败:", error);
	// 用户友好的错误提示
}
```

## 开发工具

- 使用 VS Code 或 Cursor 进行开发
- 启用 TypeScript 严格模式
- 使用 Tailwind CSS IntelliSense 插件
- 配置 ESLint 和 Prettier 集成
- 安装 shadcn/ui CLI 工具: `pnpm dlx shadcn@latest`
- 初始化 shadcn/ui: `pnpm dlx shadcn@latest init`

## 构建和部署

- 开发环境: `pnpm dev`
- 构建应用: `pnpm build`
- 运行测试: `pnpm test`
- 代码检查: `pnpm lint`
- 代码格式化: `pnpm format`

## 注意事项

- 确保所有依赖都正确安装
- 注意 Electron 版本兼容性
- 测试深色模式功能
- 验证自动更新功能
- 确保应用在不同平台上的兼容性
- 优先使用 shadcn/ui 组件，避免重复造轮子
- 保持组件库的一致性，遵循设计系统规范 # Electron + Vite + React 项目 Cursor 规则

## 项目概述

这是一个使用 Electron + Vite + React + TypeScript + Tailwind CSS 的现代化桌面应用开发模板。

## 技术栈

- **前端框架**: React 19 + TypeScript
- **构建工具**: Vite + Rolldown
- **桌面框架**: Electron
- **样式**: Tailwind CSS 4.x
- **组件库**: shadcn/ui
- **代码质量**: Oxlint + Prettier
- **包管理**: pnpm
- **测试**: Vitest + Playwright

## 代码规范

### 文件命名

- 组件文件使用 PascalCase: `ComponentName.tsx`
- 工具文件使用 camelCase: `utils.ts`
- 类型文件使用 kebab-case: `electron-updater.d.ts`
- 目录使用 kebab-case: `components/update/`

### 导入规范

- 使用 `@/` 别名导入 src 目录下的文件
- 第三方库导入放在最前面
- 本地导入放在第三方导入之后
- 类型导入使用 `import type`

### TypeScript 规范

- 严格使用 TypeScript，避免 `any` 类型
- 为所有函数参数和返回值定义类型
- 使用接口定义复杂对象类型
- 优先使用 `const` 和 `let`，避免 `var`

### React 组件规范

- 使用函数组件和 Hooks
- 组件名使用 PascalCase
- 使用 `useCallback` 和 `useMemo` 优化性能
- 事件处理函数使用 `handle` 前缀

### 样式规范

- 使用 Tailwind CSS 类名
- 支持深色模式: `dark:bg-gray-800`
- 使用响应式设计: `md:text-lg`
- 动画使用 Tailwind 类: `transition-all duration-200`

### 组件库规范

- 优先使用 shadcn/ui 组件
- 使用 `cn()` 函数合并 Tailwind 类名
- 组件导入使用 `@/components/ui/` 路径
- 自定义组件继承 shadcn/ui 的设计系统
- 使用 `class-variance-authority` 创建组件变体
- 需要新组件时，询问是否安装: `pnpm dlx shadcn@latest add [component-name]`

### Electron 规范

- IPC 通信使用 `window.electron.ipcRenderer`
- 主进程代码放在 `electron/main/`
- 预加载脚本放在 `electron/preload/`
- 使用类型安全的 IPC 通信

## 项目结构

```
src/
├── components/          # React 组件
│   ├── ui/             # shadcn/ui 组件
│   └── update/         # 更新相关组件
├── assets/             # 静态资源
├── lib/                # 工具函数
├── type/               # TypeScript 类型定义
└── demos/              # 示例代码

electron/
├── main/               # 主进程代码
└── preload/            # 预加载脚本
```

## 开发规范

### 代码格式化

- 使用 Prettier 格式化代码
- 使用 Oxlint 进行代码检查
- 缩进使用制表符 (Tab)
- 行尾使用 LF

### 提交规范

- 使用语义化提交信息
- 格式: `type(scope): description`
- 类型: feat, fix, docs, style, refactor, test, chore

### 性能优化

- 使用 React.memo 优化组件渲染
- 合理使用 useCallback 和 useMemo
- 避免不必要的重渲染
- 优化 Electron 进程间通信

### 安全规范

- 验证所有用户输入
- 使用 CSP 策略
- 避免在渲染进程中使用 Node.js API
- 使用 contextIsolation 和 enableRemoteModule: false

## 常见模式

### IPC 通信模式

```typescript
// 发送消息
await window.electron.ipcRenderer.invoke("channel-name", data);

// 监听消息
window.electron.ipcRenderer.on("channel-name", callback);
```

### 组件状态管理

```typescript
const [state, setState] = useState<StateType>();
const handleAction = useCallback(() => {
	// 处理逻辑
}, []);
```

### shadcn/ui 组件使用

```typescript
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

// 使用组件变体
<Button variant="default" size="lg" className={cn("custom-class")}>
  按钮文本
</Button>

// 使用 Dialog 组件
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
```

### 组件安装指导

当需要使用新的 shadcn/ui 组件时：

1. 检查组件是否已存在于 `src/components/ui/` 目录
2. 如果不存在，询问用户是否安装: `pnpm dlx shadcn@latest add [component-name]`
3. 常见组件安装命令：
   - `pnpm dlx shadcn@latest add button`
   - `pnpm dlx shadcn@latest add dialog`
   - `pnpm dlx shadcn@latest add input`
   - `pnpm dlx shadcn@latest add card`
   - `pnpm dlx shadcn@latest add form`

### 错误处理

```typescript
try {
	const result = await someAsyncOperation();
} catch (error) {
	console.error("操作失败:", error);
	// 用户友好的错误提示
}
```

## 开发工具

- 使用 VS Code 或 Cursor 进行开发
- 启用 TypeScript 严格模式
- 使用 Tailwind CSS IntelliSense 插件
- 配置 ESLint 和 Prettier 集成
- 安装 shadcn/ui CLI 工具: `pnpm dlx shadcn@latest`
- 初始化 shadcn/ui: `pnpm dlx shadcn@latest init`

## 构建和部署

- 开发环境: `pnpm dev`
- 构建应用: `pnpm build`
- 运行测试: `pnpm test`
- 代码检查: `pnpm lint`
- 代码格式化: `pnpm format`

## 注意事项

- 确保所有依赖都正确安装
- 注意 Electron 版本兼容性
- 测试深色模式功能
- 验证自动更新功能
- 确保应用在不同平台上的兼容性
- 优先使用 shadcn/ui 组件，避免重复造轮子
- 保持组件库的一致性，遵循设计系统规范
